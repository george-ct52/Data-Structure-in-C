#include <stdio.h>

void swap(int *a, int *b) {
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int a[], int l, int h) {
    int key = a[l];
    int i = l;
    int j = h;
    while (i < j) {
        do {
            i++;
        } while (a[i] <= key);

        do {
            j--;
        } while (a[j] > key);

        if (i < j)
            swap(&a[i], &a[j]);
    }
    swap(&a[j], &a[l]);
    return j;
}

void quicksort(int a[], int l, int h) {
    if (l < h) {
        int j = partition(a, l, h);
        quicksort(a, l, j);
        quicksort(a, j + 1, h);
    }
}

int binarysearch(int a[], int n, int ele) {
    int l, h, mid;
    l = 0;
    h = n - 1;
    while (l <= h) {
        mid = (l + h) / 2;
        if (a[mid] == ele)
            return mid;

        if (a[mid] > ele)
            h = mid - 1;
        else
            l = mid + 1;
    }

    return -1;
}

int main() {
    int n;
    int l = 0;

    printf("Enter the size of array: ");
    scanf("%d", &n);
    int a[n];

    printf("Enter the elements for the array: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    quicksort(a, l, n);
    printf("The sorted array is: ");
    for (int i = 0; i < n; i++) {
        printf("%d  ", a[i]);
    }

    int ele, index;
    printf("\nEnter the element to search: ");
    scanf("%d", &ele);
    index = binarysearch(a, n, ele);
    if (index == -1)
        printf("Element not found");
    else
        printf("Found at %d", index);

    return 0;
}
